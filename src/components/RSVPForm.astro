---
// RSVP Form component
---

<div id="rsvp-section">

  <div class="banner banner-info">
    <strong>üîí CONFIDENCIAL: Por favor, no compartas este enlace con nadie que no haya recibido la invitaci√≥n oficial. Este formulario es exclusivo para invitados confirmados.</strong>
  </div>
  
  <div class="banner banner-warning">
    <strong>‚ö†Ô∏è IMPORTANTE: No marques que llevar√°s acompa√±ante si esta persona tambi√©n ha recibido una invitaci√≥n individual. Cada invitado debe confirmar su propia asistencia.</strong>
  </div>

  <form id="rsvp-form" style="background: white; padding: 40px; border-radius: 20px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);">
    <h2 style="text-align: center; color: var(--primary-green); font-size: 2rem; margin-bottom: 30px;">
      Confirmaci√≥n de Asistencia
    </h2>
    
    <div id="existing-guest-warning" style="display: none;" class="banner banner-warning">
      <strong>üîç ATENCI√ìN: Ya existe una confirmaci√≥n registrada para este nombre. Si necesitas modificar tu confirmaci√≥n, por favor contacta directamente con los novios.</strong>
    </div>

    <div class="form-group">
      <label for="firstName" class="form-label">Nombre *</label>
      <input type="text" id="firstName" name="firstName" class="form-input" required>
    </div>

    <div class="form-group">
      <label for="lastName" class="form-label">Apellidos *</label>
      <input type="text" id="lastName" name="lastName" class="form-input" required>
    </div>

    <div class="checkbox-group">
      <input type="checkbox" id="hasCompanion" name="hasCompanion" class="checkbox">
      <label for="hasCompanion" class="form-label" style="margin: 0; cursor: pointer;">
        Asistir√© con acompa√±ante
      </label>
    </div>

    <div id="companion-fields" class="companion-fields" style="display: none;">
      <h3 style="color: var(--primary-green); margin-bottom: 20px; font-size: 1.2rem;">
        Datos del acompa√±ante
      </h3>
      
      <div class="form-group">
        <label for="companionFirstName" class="form-label">Nombre del acompa√±ante *</label>
        <input type="text" id="companionFirstName" name="companionFirstName" class="form-input">
      </div>

      <div class="form-group">
        <label for="companionLastName" class="form-label">Apellidos del acompa√±ante *</label>
        <input type="text" id="companionLastName" name="companionLastName" class="form-input">
      </div>
    </div>

    <div style="text-align: center; margin-top: 40px;">
      <button type="submit" class="btn" id="submit-btn">
        Confirmar Asistencia
      </button>
    </div>
  </form>

  <!-- Success Modal -->
  <div id="success-modal" class="modal" style="display: none;">
    <div class="modal-overlay" id="modal-overlay"></div>
    <div class="modal-content">
      <div class="modal-header">
        <h3>¬°Gracias por confirmar!</h3>
        <button class="modal-close" id="modal-close" aria-label="Cerrar modal">&times;</button>
      </div>
      <div class="modal-body">
        <div class="success-icon">
          <div class="check-mark">‚úì</div>
        </div>
        <p>Hemos registrado tu asistencia correctamente.</p>
        <p><strong>¬°Nos vemos all√≠!</strong></p>
        <p style="margin-top: 20px; color: var(--accent-gold);" class="cursive-bold">
          Rafael y Patricia
        </p>
      </div>
      <div class="modal-footer">
        <button class="btn btn-primary" id="modal-ok-btn">¬°Perfecto!</button>
      </div>
    </div>
  </div>

  <!-- Duplicate Warning Modal -->
  <div id="duplicate-modal" class="modal" style="display: none;">
    <div class="modal-overlay" id="duplicate-modal-overlay"></div>
    <div class="modal-content">
      <div class="modal-header">
        <h3>¬°Ya est√°s confirmado!</h3>
        <button class="modal-close" id="duplicate-modal-close" aria-label="Cerrar modal">&times;</button>
      </div>
      <div class="modal-body">
        <div class="warning-icon">
          <div class="info-mark">‚Ñπ</div>
        </div>
        <p>Ya existe una confirmaci√≥n registrada para este nombre.</p>
        <p><strong>¬°Tu asistencia ya est√° confirmada!</strong></p>
        <p style="margin-top: 20px; font-size: 0.95rem; color: #666;">
          Si necesitas modificar tu confirmaci√≥n, por favor contacta directamente con los novios.
        </p>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" id="duplicate-modal-ok-btn">Entendido</button>
      </div>
    </div>
  </div>

  <!-- Thank You Message (shown after confirmation) -->
  <div id="thank-you-message" style="display: none;">
    <div style="background: white; padding: 40px; border-radius: 20px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08); text-align: center;">
      <div style="font-size: 4rem; margin-bottom: 20px;">üéâ</div>
      <h2 style="color: var(--primary-green); font-size: 2rem; margin-bottom: 20px;">
        ¬°Gracias por confirmar!
      </h2>
      <p style="font-size: 1.2rem; color: var(--text-dark); margin-bottom: 15px;">
        Tu asistencia ha sido registrada correctamente.
      </p>
      <p style="font-size: 1.1rem; color: var(--text-dark); margin-bottom: 25px;">
        <strong>¬°Nos vemos all√≠!</strong>
      </p>
      <p style="color: var(--accent-gold); font-size: 1.3rem;" class="cursive-bold">
        Rafael y Patricia
      </p>
      <div style="margin-top: 30px; padding-top: 25px; border-top: 1px solid #eee;">
        <button id="reset-form-btn" style="
          background: transparent;
          border: 2px solid var(--primary-green);
          color: var(--primary-green);
          padding: 10px 25px;
          border-radius: 25px;
          font-size: 0.9rem;
          cursor: pointer;
          transition: all 0.3s ease;
        " onmouseover="this.style.background='var(--primary-green)'; this.style.color='white';"
           onmouseout="this.style.background='transparent'; this.style.color='var(--primary-green)';">
          Confirmar otra asistencia
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: fadeIn 0.3s ease-out;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
  }

  .modal-content {
    position: relative;
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    animation: slideIn 0.3s ease-out;
  }

  .modal-header {
    padding: 30px 30px 0;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
  }

  .modal-header h3 {
    margin: 0;
    color: var(--primary-green);
    font-size: 1.8rem;
    font-weight: 600;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 2rem;
    color: #999;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
  }

  .modal-close:hover {
    background: #f5f5f5;
    color: #666;
  }

  .modal-body {
    padding: 20px 30px;
    text-align: center;
  }

  .success-icon {
    margin: 20px 0 30px;
  }

  .check-mark {
    display: inline-block;
    width: 80px;
    height: 80px;
    background: var(--primary-green);
    border-radius: 50%;
    color: white;
    font-size: 3rem;
    font-weight: bold;
    line-height: 80px;
    animation: pulse 0.6s ease-out;
  }

  .modal-body p {
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--text-dark);
    margin: 10px 0;
  }

  .modal-footer {
    padding: 0 30px 30px;
    text-align: center;
  }

  .btn-primary {
    background: var(--primary-green);
    color: white;
    border: none;
    padding: 15px 40px;
    border-radius: 50px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(120, 155, 122, 0.3);
  }

  .btn-primary:hover {
    background: #6a8a6c;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(120, 155, 122, 0.4);
  }

  .btn-secondary {
    background: #f8f9fa;
    color: #495057;
    border: 2px solid #dee2e6;
    padding: 15px 40px;
    border-radius: 50px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-secondary:hover {
    background: #e9ecef;
    border-color: #adb5bd;
    transform: translateY(-2px);
  }

  .warning-icon {
    margin: 20px 0 30px;
  }

  .info-mark {
    display: inline-block;
    width: 80px;
    height: 80px;
    background: #17a2b8;
    border-radius: 50%;
    color: white;
    font-size: 3rem;
    font-weight: bold;
    line-height: 80px;
    animation: pulse 0.6s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-50px) scale(0.9);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @keyframes pulse {
    0% {
      transform: scale(0);
    }
    50% {
      transform: scale(1.1);
    }
    100% {
      transform: scale(1);
    }
  }

  @media (max-width: 480px) {
    .modal-content {
      width: 95%;
      margin: 20px;
    }

    .modal-header,
    .modal-body,
    .modal-footer {
      padding-left: 20px;
      padding-right: 20px;
    }

    .modal-header h3 {
      font-size: 1.5rem;
    }

    .check-mark,
    .info-mark {
      width: 60px;
      height: 60px;
      font-size: 2rem;
      line-height: 60px;
    }
  }
</style>

<script>
  const form = document.getElementById('rsvp-form') as HTMLFormElement;
  const hasCompanionCheckbox = document.getElementById('hasCompanion') as HTMLInputElement;
  const companionFields = document.getElementById('companion-fields');
  const companionFirstName = document.getElementById('companionFirstName') as HTMLInputElement;
  const companionLastName = document.getElementById('companionLastName') as HTMLInputElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const successModal = document.getElementById('success-modal');
  const modalClose = document.getElementById('modal-close');
  const modalOkBtn = document.getElementById('modal-ok-btn');
  const modalOverlay = document.getElementById('modal-overlay');
  const duplicateModal = document.getElementById('duplicate-modal');
  const duplicateModalClose = document.getElementById('duplicate-modal-close');
  const duplicateModalOkBtn = document.getElementById('duplicate-modal-ok-btn');
  const duplicateModalOverlay = document.getElementById('duplicate-modal-overlay');
  const existingGuestWarning = document.getElementById('existing-guest-warning');
  const thankYouMessage = document.getElementById('thank-you-message');
  const resetFormBtn = document.getElementById('reset-form-btn');

  let confirmedGuests: any[] = [];

  // Modal functions
  function showSuccessModal() {
    successModal!.style.display = 'flex';
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
  }

  function hideSuccessModal() {
    successModal!.style.display = 'none';
    document.body.style.overflow = 'auto'; // Restore scrolling

    // Reset form to allow multiple submissions
    form.reset();
    companionFields!.style.display = 'none';
    companionFirstName.required = false;
    companionLastName.required = false;
    submitBtn.disabled = false;
    submitBtn.textContent = 'Confirmar Asistencia';
    existingGuestWarning!.style.display = 'none';
  }

  function showDuplicateModal() {
    duplicateModal!.style.display = 'flex';
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
  }

  function hideDuplicateModal() {
    duplicateModal!.style.display = 'none';
    document.body.style.overflow = 'auto'; // Restore scrolling

    // Reset form button state
    submitBtn.disabled = false;
    submitBtn.textContent = 'Confirmar Asistencia';
  }


  // Success modal event listeners
  modalClose?.addEventListener('click', hideSuccessModal);
  modalOkBtn?.addEventListener('click', hideSuccessModal);
  modalOverlay?.addEventListener('click', hideSuccessModal);

  // Duplicate modal event listeners
  duplicateModalClose?.addEventListener('click', hideDuplicateModal);
  duplicateModalOkBtn?.addEventListener('click', hideDuplicateModal);
  duplicateModalOverlay?.addEventListener('click', hideDuplicateModal);

  // Close modals with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (successModal!.style.display === 'flex') {
        hideSuccessModal();
      } else if (duplicateModal!.style.display === 'flex') {
        hideDuplicateModal();
      }
    }
  });

  // Fetch confirmed guests from API
  async function fetchConfirmedGuests(): Promise<any[]> {
    try {
      const response = await fetch('/api/rsvp');
      const data = await response.json();
      if (data.success) {
        confirmedGuests = data.guests;
        return data.guests;
      }
      return [];
    } catch (error) {
      console.error('Error fetching guests:', error);
      return [];
    }
  }

  // Check if guest already exists
  function isGuestAlreadyConfirmed(firstName: string, lastName: string): boolean {
    return confirmedGuests.some(guest => 
      guest.NOMBRE === firstName.toUpperCase() && 
      guest.APELLIDOS === lastName.toUpperCase()
    );
  }

  // Toggle companion fields
  hasCompanionCheckbox.addEventListener('change', () => {
    if (hasCompanionCheckbox.checked) {
      companionFields!.style.display = 'block';
      companionFirstName.required = true;
      companionLastName.required = true;
    } else {
      companionFields!.style.display = 'none';
      companionFirstName.required = false;
      companionLastName.required = false;
      companionFirstName.value = '';
      companionLastName.value = '';
    }
  });

  // Real-time validation for existing guests
  function checkExistingGuest() {
    const firstName = (document.getElementById('firstName') as HTMLInputElement).value.trim();
    const lastName = (document.getElementById('lastName') as HTMLInputElement).value.trim();
    
    if (firstName && lastName && isGuestAlreadyConfirmed(firstName, lastName)) {
      existingGuestWarning!.style.display = 'block';
      submitBtn.disabled = true;
      submitBtn.textContent = 'Ya confirmado';
    } else {
      existingGuestWarning!.style.display = 'none';
      submitBtn.disabled = false;
      submitBtn.textContent = 'Confirmar Asistencia';
    }
  }

  document.getElementById('firstName')!.addEventListener('input', checkExistingGuest);
  document.getElementById('lastName')!.addEventListener('input', checkExistingGuest);

  // Handle form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const firstName = (formData.get('firstName') as string).trim();
    const lastName = (formData.get('lastName') as string).trim();
    
    // Double-check for existing guest
    if (isGuestAlreadyConfirmed(firstName, lastName)) {
      showDuplicateModal();
      return;
    }
    
    const hasCompanion = hasCompanionCheckbox.checked;
    const companionFirstNameValue = hasCompanion ? (formData.get('companionFirstName') as string).trim() : '';
    const companionLastNameValue = hasCompanion ? (formData.get('companionLastName') as string).trim() : '';
    
    // Validate companion fields if checkbox is checked
    if (hasCompanion && (!companionFirstNameValue || !companionLastNameValue)) {
      alert('Por favor, completa los datos del acompa√±ante.');
      return;
    }
    
    // Disable submit button while processing
    submitBtn.disabled = true;
    submitBtn.textContent = 'Procesando...';
    
    try {
      const response = await fetch('/api/rsvp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          firstName,
          lastName,
          hasCompanion,
          companionFirstName: companionFirstNameValue,
          companionLastName: companionLastNameValue
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        // Show success modal
        showSuccessModal();
      } else {
        // Check if it's a duplicate error
        if (result.error && result.error.includes('ya ha confirmado')) {
          showDuplicateModal();
        } else {
          alert(result.error || 'Ocurri√≥ un error al procesar tu confirmaci√≥n.');
          submitBtn.disabled = false;
          submitBtn.textContent = 'Confirmar Asistencia';
        }
      }
      
    } catch (error) {
      console.error('Error submitting form:', error);
      alert('Ocurri√≥ un error al procesar tu confirmaci√≥n. Por favor, intenta nuevamente.');
      submitBtn.disabled = false;
      submitBtn.textContent = 'Confirmar Asistencia';
    }
  });

  // Load confirmed guests on page load
  window.addEventListener('load', async () => {
    await fetchConfirmedGuests();
    if (confirmedGuests.length > 0) {
      console.log(`${confirmedGuests.length} confirmaciones registradas`);
    }
  });
</script>